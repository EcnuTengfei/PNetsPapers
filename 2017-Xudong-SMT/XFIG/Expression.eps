%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1080.000000 261.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1080 261
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1080 261
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PingFangSC-Regular
%!FontType1-1.0: AAAAAJ+PingFangHK-Regular 001.003%%CreationDate: 3/9/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAJ+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid36 putdup 2 /cid37 putdup 3 /cid38 putdup 4 /cid40 putdup 5 /cid44 putdup 6 /cid47 putdup 7 /cid49 putdup 8 /cid50 putdup 9 /cid54 putdup 10 /cid55 putdup 11 /cid56 putdup 12 /cid57 putdup 13 /cid68 putdup 14 /cid69 putdup 15 /cid70 putdup 16 /cid72 putdup 17 /cid76 putdup 18 /cid79 putdup 19 /cid81 putdup 20 /cid82 putdup 21 /cid83 putdup 22 /cid85 putdup 23 /cid86 putdup 24 /cid87 putdup 25 /cid91 putdup 26 /cid92 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6D9EBFFA5FC3DC76F8ECA2B2D08EB41E76ADCA91D6509539840689AEC4F28375271245825B68EE86DC77A7AA5629878B902073287CCAAD11F956C36C4C675E69198CC66DE7A5EDC4B7EAA285ADD4692AC17DF0F5F3C9DCC929AFC499158A6C54713ED5821E72C306CD526EF77C1FBA5EFAF09792CF04EF1E53A3582B6AF1F4D0E09FBFBDBDE71953956340BAE66205792977DCD3457C228B7BFD2D5FB9CDC8D55D535F4AAC7D1C4E040BC5DFEBD9D86EA321F82D700D755165A46CE6B4FF6F64A4B187FDC8D29D1E62051CF6B6BD3B2C37F954AFF10129B64070D55CC64955487C2807454B481FFD21CE82E6E24A66F9486778EA6DEC6BA3063814B8011703E93AEFBCBD1A367ADD1ABBE9CD894AFF390F13509A5D23B34DEE0D9C425239025FB42F5B615A995605B09B845B3DA01BE88AB7730B92047B7FA1FDF9EB64D374EE0FAB2E30E6745A7F5BD6C4E39EF02714E8629D27C2D02E29CACA15680445EB06F9C1162B4B32C3CAD0555A26986A69CBB5638DD52B7F157D5E270630C5F99060EFDCEACDCB3C233D150481E85C9B2C3E0C414C0FA90448B5BB0C3C1A279ACB33F49B841ABBCEE09EF0DA8FDEF81C242A21F6D1992C9BF2D6E2151CD0F6E139612A8508C9A9468B0CF3ED1635B14C6D21A95D1736B1CB533730BDA645992B3707E1E4018AB41BC71CB86A66D226AE6D04F184019099FC7ADE15B8FA154FFAB6FEC06E1A67BC3047797B7A41433EE20388F6CC9A8782E6B64D2566B351D65D151174F82D333FD9B1676110F9C89A37F09D183F366B43377C5043505F11C24FB5934AAED4F288D50D1E9E5F99D943DA43E91706ADA1B5B747A99E680A85478FA2EA5CBF54AC06A6903E69BFE501E0E740465F84E07C467B97401636CFD02972E3C0F8EDCAA357BE77AA378E4D5A557D1C491E2B188179D6939F8210D1885E04D9F94B8D60FD42431BDEB02A17EDFCBEA1A185B30CCA05AC824088F1DB64A2A64B8BD4A0ACDBCB32858E0D5884C938A4901EB33C02FAEC4857A733413278CBE76102CE2EDDD67D5A2E08FB9EA5B6332BB9EFA599CA8B6EC538D90A6C203F0393AB5A609DE5D7B03EBAFFCA3C7D365982F056B2C6FA37C17485B44DAC326534A28EEC4B291DB5C426BA7B284292BB89AD8B5E27AE0170A3E23A39BB979E6FF837569FA36FF96435FF4B5E656B33DA6AB76415D1D0948DF19717E869D196B6D0B8B82FDB88D56194813D5210AC2BD4A72E3F04FCEF94F203039D95073897D82A3843D2B0B7A7ED2079CD6EB7E70201F00756E98D4F4F67F9D9D4C61D1F187CD84E829BF2158CE979A80B5AE1B0D5450016912C59B2B3AF51BE9ECFC23071999083FCD143C753398C84185FCF12D8398F044698810E693243F27F7E044205F6B71F25CDEDC6B5438FB1E1E27EF2CA0DA4EC21FF7F360B6C9BF909CF1CAF14052A3B299EDC9FF7DA943B9B9BA5DFB3138E8C784D120B626FF21178BEA76B1940FC68B202BACFBF1EB1C95BBFFA540E65D3493A0596B5D1EFEDE4BDD3DB287574785C850BD08E2D36B4147541BD6CC1DFF8142CCF17A2660EF336BDB6575E43DDF6540BB01ABFA6F2B83FA515BD9F05E828DAE5EB9F737B8E35E332DE9CF458171AC26261D3245C45CF3492220DC62BADFD41565803CB7AFBC7523B375B226EA9B798A2599C7455DD20878FEDF5F84D0446F9A783EAE5FA84C83AB1BD9A108CC824C857932BA4C9DB0F157A61F03DEF5C2136FD0FF18807FBD5D66EBB2779ED5F05561D30CF87E7D446703B5B3905E130A800FF0BFDA2921528108609A604202C698AB39B218E4CEDCBEBA5F5E566C15E3E180EE21C2B26462D7E33AE5B29202B05C8DA4A609FBA300F786718DB37F321E553BBCC823759F66E047E93A785612504AAE0D83D67A84B206CFC8C9F9EDA60CECE5EA4C5D7234242211702C14A2A5F0D641291EC23964EB965EFEE36EA5A362FCB91B20613BA97A8C1E2DF5E0E90AD776654C89DA560FFB1E67FE2191361CE0F481517898671ADAEB6CF1FBCA52603F55EF8C72DD586459147B05D266243807437209533BAE948F9EB8BF565CFC666D3BFF1A5D61DC7F5E2ED46CEDF365EC945A78A68A5F22FAF68FBAB0EE2B54C0EEA89F5EDA3D01E3802A2E21C86C44398E14FD428F1341DE79D0E99A7844885BF59D1E2A4FE2F2562A599BACC58065E4B4AB45FF97DF4156B51735BA274B0319204717DD43853F22415AC338331353536841B89329559A7123B087ACD36253C158C978079C6C5234E963180A23ADBC31AF82047C67E36FDF198ECF3D6E1772148A8BECFABD557B4AACA4CA67A4ED05F9A5775997FF51A66DE85DC1FC7236466B97266507A3C17F9272E29735F1DAC22E391E58F4460C1B292056F76E7B77535569B3D654052900D3F36EB011818ED20C3D3DECF41CCA6CC22B11DF802937135BD68ECA1B1CAF5EC08F455402F36E7BA97581E35D3F8B0FE1C8B8F6EDA9D2810427F709B979FB2E67469F64677439403263EB6471B1B15A55A972F19E9AC50489ADFEA200B1AF4528F19B2913E971E4BEC1C338F5A5D35A17D09662AA2BF8D2E44416AFB5A252E07C5E36A6D5B69693D4D8CC7A5596630B34BE694B49415051B05DF4B236AB49A4FEB4B25860C198EAA38D389DB5CB3B7C3058D943C56553D20D045AD9B73C4A0ACE7DC99AD9D27F4B6BF02E12B273B7B00D0680B661478919EBCB003ACDFCD9A56A660E8EB0283F2B169F640E49DA4A523A49096A7EC8D198E09AFF81C5D2C9F7FC5EE289685C1438281406931C1C8A2985E1781A031B2235A72D7D1C993D059CA7635A82B59D830FDED1F643612945DB78F5EF788491FC617BBFD8D3741C2458C3A8D8DB3219ED7EBC818E5C1B17157DA5E95A94FAC2B4887085555165BF75291EF6E74094C87DD50ADFE08D527560FF600475E618BE4C201E9B620FD9B692A664AD781447C16150BB47CCF828EA65FC5794B89B064C658FE7E0524FB21634D8CB560E1C45C43D91EDA8CCB167C8FA052C429DCD0EA328A9EEAA7E70B4C0C5CB300EFE7D18A4C4F389430396EC8AFA3546DDEBF3B784FFCBA2FB3419EF9BDA5957F5D1AAB08FF3C477B05BB6EE890E0755433005B44BAC2F8114E12365E09893A6BB6B6BE14185F0E826B9B42DC774A820261EBCF5A879985CDA132DD6058F33EF7822020F91976D9CA17F3CFE60002CAE03A8277E8C1BBD2781F76A303D1629493B81FC65DAE5158A8D44AB9D6EA2816A459C8B8ADA3A806C1194EA879C4D68049148A5A3FB4F1A8A44B83F7152A90155ADE84D122BB7FFB330A1F8BEFCB7FE9CEBDCE95FB2DDC5FE4700B4508F77744FF61A1617574B0D351229E6A4B4EA2EB4608CE272656B8680E35F230C49A27269453D23F0165513D2D078925304D55A43A5486B7FE6012846420F8D90C019E328C315E3F88AF76B6BC35389AD0B4C31B9C4B189830EE8D14763D35E5021330FA43D00E9FC76F99295489477B2423049917B98BBDDC1C08EDA9B75E52AC9C869911C78B61A9C834CDAF25660BB9EAF85035C10ADD07C92DFFC443EAD5AC59D687B428960B40791D576F0EC066319191D8B164CCD03144EC6976EBE6112AB1B2B8EFC212B1E5BD4277218CFD5609AC20A7B1DE9A49989D5BB4E2D82E573AE1A2FB61A106A3E7334A960B7BC4B51C055AEB31BDA63A97E2303EEC61408AF9AAF5C4C9D1DD520A301DF2DD13B4BA4FE9F50D2322D3C09D357A8C14ACE8E33032902B9C5651FFCA43958873EDC717C973214E627F7A8937040078BC49742EA5E438A2B02C14B7348401478B7B395FDA5E6E9A775F349BF605FA66572179E8CF744F0A8735430A2194A12E9CF792E8AB8FA4A74093E608CEE1E19C019A0047716DE6C5FA81A4C25D150B9FFFD66D7E4857807A6AA51C8797EEF96B75F6C476D4D89A5D5AADD2A0C24CD5DC98AD9C726AEF8CE9A8A1C6610A825E518BCAC4361557D938FCCAC85850F44AD8A4873FD921CE8311593A6048CF2C634F69FFA223F14724982AFB66BDC9FA3895038C08F7F111B698BCB26EDBB43C3BEF1F54C801402192C5E53D6DD6E8ECB9BF2DC7029117D29FF023B77263A221A5460C00A57B530540AD508EA09321D1D0F2A3D98B1AE0A199CC319715F41CEB77BB0C2C44351A6D50CC9E70D8C2AD376CC06148E70404EBB53445B500F3CEAE1E9F655DCA7B53BA182D3535DED580698F6F42B436FDA44E12ACC17C9C06EE2063284C8AC809AEE62E2C19C0CA133F5A229C1461A10E7340002919F336BCA64E288485ECED1D97076A00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid40 putdup 34 /cid91 putdup 35 /cid83 putdup 36 /cid85 putdup 37 /cid72 putdup 38 /cid86 putdup 39 /cid76 putdup 40 /cid82 putdup 41 /cid81 putdup 42 /cid49 putdup 43 /cid68 putdup 44 /cid92 putdup 45 /cid50 putdup 46 /cid37 putdup 47 /cid56 putdup 48 /cid47 putdup 49 /cid87 putdup 50 /cid79 putdup 51 /cid57 putdup 52 /cid69 putdup 53 /cid36 putdup 54 /cid70 putdup 55 /cid44 putdup 56 /cid38 putdup 57 /cid54 putdup 58 /cid55 putreadonly def/$SubFontArray [/AAAAAJ+PingFangHK-Regular findfont ] def/CharProcs 28 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid36 {(\001) 0 $SP} putdup /cid37 {(\002) 0 $SP} putdup /cid38 {(\003) 0 $SP} putdup /cid40 {(\004) 0 $SP} putdup /cid44 {(\005) 0 $SP} putdup /cid47 {(\006) 0 $SP} putdup /cid49 {(\007) 0 $SP} putdup /cid50 {(\010) 0 $SP} putdup /cid54 {(\011) 0 $SP} putdup /cid55 {(\012) 0 $SP} putdup /cid56 {(\013) 0 $SP} putdup /cid57 {(\014) 0 $SP} putdup /cid68 {(\015) 0 $SP} putdup /cid69 {(\016) 0 $SP} putdup /cid70 {(\017) 0 $SP} putdup /cid72 {(\020) 0 $SP} putdup /cid76 {(\021) 0 $SP} putdup /cid79 {(\022) 0 $SP} putdup /cid81 {(\023) 0 $SP} putdup /cid82 {(\024) 0 $SP} putdup /cid83 {(\025) 0 $SP} putdup /cid85 {(\026) 0 $SP} putdup /cid86 {(\027) 0 $SP} putdup /cid87 {(\030) 0 $SP} putdup /cid91 {(\031) 0 $SP} putdup /cid92 {(\032) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/PingFangSC-Regular cguidfix
/F1.1/PingFangSC-Regular renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 1080 261 rc
0 261 m
1080 261 l
1080 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-836 1074 m
1916 1074 l
1916 -1089 l
-836 -1089 l
h
-836 1074 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
940.5 295 m
940.5 322.5 l
S
690.5 295 m
690.5 322.5 l
S
690.5 180 m
690.5 265 l
S
440.5 295 m
440.5 322.5 l
S
940.5 180 m
940.5 265 l
S
440.5 180 m
440.5 265 l
S
244.82608 180 m
297.67392 207.5 l
S
216 180 m
216 207.5 l
S
188.47826 180 m
138.02174 207.5 l
S
490.5 113.25 m
865.5 156.375 l
S
490.5 119 m
625.28259 150 l
S
440.5 122.5 m
440.5 150 l
S
390.5 120.30624 m
266 152.19377 l
S
390.5 114.36157 m
71.5 158.13843 l
S
0 i
1 1 1 sc
CM
419.5 260.5 m
519.5 260.5 l
519.5 230.5 l
419.5 230.5 l
h
419.5 260.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
390.5 92.5 m
490.5 92.5 l
490.5 122.5 l
390.5 122.5 l
h
390.5 92.5 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 469.5 245.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-40.504002 6 m
(!"#$%&&'\(\))[ 10.192000 8.144000 9.376000 5.840000 8.880000 8.080000 8.080000 4.096000 9.376000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
894.5 203 m
1044.5 203 l
1044.5 173 l
894.5 173 l
h
894.5 203 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
865.5 150 m
1015.5 150 l
1015.5 180 l
865.5 180 l
h
865.5 150 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 969.5 188 cm
-68.440002 6 m
(*+$,-#!"#$%&&'\(\))[ 11.504000 8.944000 5.840000 7.936000 12.272000 9.376000 10.192000 8.144000 9.376000 5.840000 8.880000 8.080000 8.080000 4.096000 9.376000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
639.5 203 m
799.5 203 l
799.5 173 l
639.5 173 l
h
639.5 203 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
610.5 150 m
770.5 150 l
770.5 180 l
610.5 180 l
h
610.5 150 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 719.5 188 cm
-74.624001 6 m
(.'\)+$,-#!"#$%&&'\(\))[ 10.832000 4.096000 8.944000 8.944000 5.840000 7.936000 12.272000 9.376000 10.192000 8.144000 9.376000 5.840000 8.880000 8.080000 8.080000 4.096000 9.376000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
389.5 203 m
549.5 203 l
549.5 173 l
389.5 173 l
h
389.5 203 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
360.5 150 m
520.5 150 l
520.5 180 l
360.5 180 l
h
360.5 150 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 469.5 188 cm
-72.872002 6 m
(/\)+$,-#!"#$%&&'\(\))[ 11.424000 8.944000 8.944000 5.840000 7.936000 12.272000 9.376000 10.192000 8.144000 9.376000 5.840000 8.880000 8.080000 8.080000 4.096000 9.376000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
195 203 m
295 203 l
295 173 l
195 173 l
h
195 203 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
166 150 m
266 150 l
266 180 l
166 180 l
h
166 150 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 245 188 cm
-23.304001 6 m
(0'1%$+2)[ 9.408000 4.096000 5.680000 8.880000 5.840000 8.944000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
0.5 203 m
100.5 203 l
100.5 173 l
0.5 173 l
h
0.5 203 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
-28.5 150 m
71.5 150 l
71.5 180 l
-28.5 180 l
h
-28.5 150 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 50.5 188 cm
-30.032 6 m
(3+$'+42%)[ 10.224000 8.944000 5.840000 4.096000 8.944000 9.376000 3.760000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
300.5 145.5 m
410.5 145.5 l
410.5 115.5 l
300.5 115.5 l
h
300.5 145.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
271.5 207.5 m
381.5 207.5 l
381.5 237.5 l
271.5 237.5 l
h
271.5 207.5 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 355.5 130.5 cm
-46.984001 6 m
(561'\(\)0'1%$+2)[ 10.512000 8.752000 5.680000 4.096000 9.376000 8.944000 9.408000 4.096000 5.680000 8.880000 5.840000 8.944000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
195 145.5 m
295 145.5 l
295 115.5 l
195 115.5 l
h
195 145.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
166 207.5 m
266 207.5 l
266 237.5 l
166 237.5 l
h
166 207.5 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 245 130.5 cm
-39.976002 6 m
(.\(\(20'1%$+2)[ 10.832000 9.376000 9.376000 3.760000 9.408000 4.096000 5.680000 8.880000 5.840000 8.944000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
89.5 145.5 m
189.5 145.5 l
189.5 115.5 l
89.5 115.5 l
h
89.5 145.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
60.5 207.5 m
160.5 207.5 l
160.5 237.5 l
60.5 237.5 l
h
60.5 207.5 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 139.5 130.5 cm
-32.512001 6 m
(7\)10'1%$+2)[ 3.792000 8.944000 5.680000 9.408000 4.096000 5.680000 8.880000 5.840000 8.944000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
369.5 88 m
569.5 88 l
569.5 58 l
369.5 58 l
h
369.5 88 m
f
[
4
4
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
340.5 265 m
540.5 265 l
540.5 295 l
340.5 295 l
h
340.5 265 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 469.5 73 cm
-89.575996 6 m
(889/\)+$,-#!"#$%&&'\(\))[ 11.648000 11.648000 10.112000 11.424000 8.944000 8.944000 5.840000 7.936000 12.272000 9.376000 10.192000 8.144000 9.376000 5.840000 8.880000 8.080000 8.080000 4.096000 9.376000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
869.5 88 m
1069.5 88 l
1069.5 58 l
869.5 58 l
h
869.5 88 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
840.5 265 m
1040.5 265 l
1040.5 295 l
840.5 295 l
h
840.5 265 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 969.5 73 cm
-85.143997 6 m
(889*+$,-#!"#$%&&'\(\))[ 11.648000 11.648000 10.112000 11.504000 8.944000 5.840000 7.936000 12.272000 9.376000 10.192000 8.144000 9.376000 5.840000 8.880000 8.080000 8.080000 4.096000 9.376000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
359.5 30.5 m
579.5 30.5 l
579.5 0.5 l
359.5 0.5 l
h
359.5 30.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
330.5 322.5 m
550.5 322.5 l
550.5 352.5 l
330.5 352.5 l
h
330.5 322.5 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 469.5 15.5 cm
-99.856003 6 m
(0-:-9/\)+$,-#!"#$%&&'\(\))[ 9.408000 12.272000 9.904000 12.272000 10.112000 11.424000 8.944000 8.944000 5.840000 7.936000 12.272000 9.376000 10.192000 8.144000 9.376000 5.840000 8.880000 8.080000 8.080000 4.096000 9.376000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
619.5 88 m
819.5 88 l
819.5 58 l
619.5 58 l
h
619.5 88 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
590.5 265 m
790.5 265 l
790.5 295 l
590.5 295 l
h
590.5 265 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 719.5 73 cm
-91.328003 6 m
(889.'\)+$,-#!"#$%&&'\(\))[ 11.648000 11.648000 10.112000 10.832000 4.096000 8.944000 8.944000 5.840000 7.936000 12.272000 9.376000 10.192000 8.144000 9.376000 5.840000 8.880000 8.080000 8.080000 4.096000 9.376000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
609.5 30.5 m
829.5 30.5 l
829.5 0.5 l
609.5 0.5 l
h
609.5 30.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
580.5 322.5 m
800.5 322.5 l
800.5 352.5 l
580.5 352.5 l
h
580.5 322.5 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 719.5 15.5 cm
-101.608 6 m
(0-:-9.'\)+$,-#!"#$%&&'\(\))[ 9.408000 12.272000 9.904000 12.272000 10.112000 10.832000 4.096000 8.944000 8.944000 5.840000 7.936000 12.272000 9.376000 10.192000 8.144000 9.376000 5.840000 8.880000 8.080000 8.080000 4.096000 9.376000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
859.5 30.5 m
1079.5 30.5 l
1079.5 0.5 l
859.5 0.5 l
h
859.5 30.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 29 353 cm
830.5 322.5 m
1050.5 322.5 l
1050.5 352.5 l
830.5 352.5 l
h
830.5 322.5 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 969.5 15.5 cm
-95.424004 6 m
(0-:-9*+$,-#!"#$%&&'\(\))[ 9.408000 12.272000 9.904000 12.272000 10.112000 11.504000 8.944000 5.840000 7.936000 12.272000 9.376000 10.192000 8.144000 9.376000 5.840000 8.880000 8.080000 8.080000 4.096000 9.376000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
