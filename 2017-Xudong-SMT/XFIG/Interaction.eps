%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1031.000000 594.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1031 594
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1031 594
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Bold
%!FontType1-1.0: HelveticaNeue-Bold 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /l put
dup 35 /g put
dup 36 /e put
dup 37 /b put
dup 38 /r put
dup 39 /a put
dup 40 /space put
dup 41 /P put
dup 42 /s put
dup 43 /n put
dup 44 /t put
dup 45 /i put
dup 46 /o put
dup 47 /d put
dup 48 /c put
dup 49 /f put
dup 50 /m put
dup 51 /O put
dup 52 /T put
dup 53 /p put
dup 54 /N put
dup 55 /M put
dup 56 /u put
dup 57 /J put
dup 58 /v put
dup 59 /I put
dup 60 /D put
dup 61 /y put
dup 62 /ampersand put
dup 63 /F put
dup 64 /V put
dup 65 /C put
dup 66 /h put
dup 67 /k put
dup 68 /R put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<







270D1C0A110E1B322C220A020205FDFBE9233C2D1A03028405101D29186000000001001DFFF301FC02130039006DBA0000000100032BBA001E001D00032BB8001E10B8001D10B8000BDCBA002800010000111239B800282FB80015DCB8001D10B80030D0B800302FB8001E10B8003BDC00BA0035000600032BB8003510BA0023001A00032BB8002310B8000610B80000DCB8002310B8001DDC303137231E0333323E0235342E02272E0335343E0233321617332E0323220E0215141E02171E0115140E0223222E02A487022B43562D2C5542291C2E3B1F1E3A2D1C10171C0C2638038704293E4F2A2A5040271C2E3B1F4C55121B210F15271E13A834452A12112A45332431211407070C0F181310130A031D29303F26100F254032222F1F130710202013190F070A1521000000010006FFFB015202A000190053BA0001000200032BB8000110B8000210B80006D0B8000110B80016D000B800012FBA0013000C00032BB8001310BA0004000500032BB8000410B80000D0B8000C10B8000FD0B8000F2FB8000510B80017D030311335231523153311141E0233323637350E0123222635113335EA8E56561A2D3B21152C120A160C24186802059B9B5FFECF27301A0902036E0202182401005F00010036FFF3021B02050016004DBA000A000B00032BB8000A10BA0001000200032BB8000110B8000210B80015D0B800152FB8000110B80018DC00B800012FB8000A2FBA0006001100032BB8000610BA001500110006111239303121112311140623222635112311141E02333236373315021B8E343A33288E112A49392D561B030205FEF14F453F400124FEC2304F371E282D48000100050000020302050007001900B800012FB800052FB800002FBA000400000001111239303121132303230323130154AF8D6D026D95B10205FE9F0161FDFB0001FFFBFF4B020D02050015001D00B800102FB800132FB800012FB800052FBA000400130001111239303105132303230323131615140607062627151E013332360135D89371027597B5061B1C152A14162B164952400245FE9E0162FE1B0F111726030104027502033600000001000EFF5C047902F90010002BB800142BBB000B0012000800182BB8000B10B80012DC00B800092FB800002FBB0005000F000E00182B303105090117072132363511331114062321170191FE7D01854EE802BC292873655FFD3FEDA4014C015159BF2D2A01C1FE3F6461C7FFFF0045FF5C04B002F90047002504BE0000C001400000000001000000010000E563F13F5F0F3CF5011903E800000000B643F84C00000000D34D85A2FC06FE1F059D04750001000900020000000000000001000003CFFF27001D05DCFC06FE77059D00010000000000000000000000000000002701F400110116000002AD002002ADFFFA02E50026

00>] def
/CharStrings 39 dict dup begin
/.notdef 0 def
/space 1 def
/ampersand 2 def
/A 3 def
/C 4 def
/D 5 def
/F 6 def
/I 7 def
/J 8 def
/M 9 def
/N 10 def
/O 11 def
/P 12 def
/R 13 def
/T 14 def
/V 15 def
/a 16 def
/b 17 def
/c 18 def
/d 19 def
/e 20 def
/f 21 def
/g 22 def
/h 23 def
/i 24 def
/k 25 def
/l 26 def
/m 27 def
/n 28 def
/o 29 def
/p 30 def
/r 31 def
/s 32 def
/t 33 def
/u 34 def
/v 35 def
/y 36 def
/uni2B90 37 def
/uni2B91 38 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1018 -481 1437 1141}def
/UniqueID 4258367 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C93181B17796A1204F5476A04185A500C7D1646046CB4388F5303793A507F74A76DAE145DD38C83DB199C8FBF50069EC8B57AEAFA8B784369470AC5BD49293CC403B0EA1EBDCA1926D6A1BE1BE905895102B66101DD525020624EFF6D199A6AA1A90DECE17C3A9A43E133FA6389CB93B4BC5216FF8D86B613919351A79D93AF84D36895E2A6006E553EF7CB754235C954E07B58CDA58E7FA7C65136EE056325FA421A59401F01631E0D6AF23F83C02EFC4C42DB26F8280D72AA8C36E200EB714A23FDDE78DE32DE9A23B0A8EA3549E4887088102D756F83DF40C99FCCF22359AD6C9AA385372FC8EC7917CF14FF6F4D78ED22FD6D2A4D7C8F1F1CF79012250CF7593B6C87031CD126DF2A069CAE9FB67FA399A4EE2592A509AA79B5A6D64C2E4B7EB83C05A9A6E023E3E719BDABC61771056A51E5BBD5939672D3028D15906BEC0C3BA014EF7B693094A66158BED33AE2692FF621583A4FB7C819DA08A84E3FF0A00A1EE45B184DE88EE723E7EB1E458CFC844F346EBC0C6472BA4796DCDA369F5C44C09DBB515EC6989A31C75526B2CE78649AA76E892313C94BF930FA7D71439AD9B84BEE33F8C50D27EDC9510D4FD7C35C1EFC9D020F79388824A5A4CFAF6481FDBFA65126B5C43F882533A2DB35AE8D5E799D3BE353E1CE416924D3F568196598544150128DFE21E9B56E110861DDBBA57CA19C5575B872B8A87E62ED93209FDE785EC45691171E95B6FEC393674E3EDC7BE508A13489DDC19A61B7A325C81F
EE840AA252E7F941C20A2805BDCF7A4BD2833DC2722EE762EA63F07C126C6E995D1A8D77AE55A17A8061DCF462C3EAE0A7150F4ED79A93FFBD80FB26301875F012BAC6A0426535F979FDB5546AD94D80AE1345F29AA1B6C8BCF17C3351791C9D59867A9B599E905089875572B2E9D2297814425508A5619D25412CFA1741EF85196F404D47C2E7BDCD2DE4FD3AE4F3F55ECA5CFE944F5E008A539A89FF6F1601A968CE654F33AEA46CF631D50BB721F8DCC232BF01F422244FB1F6DF0F7FCCC9F57079CDF43585FE7C37243675093BE281B447DA11D886A7A98098E41DCE31F91BAB7B9C6FA5364CAF6F4A39E5906E4E5EC209AD02CD01C3253AFE6004E93C5C525DD37049BF165B882A35639BBB2BA8323F4463396910B5072B49AC875794CF792F4913F1DC8AEC5E6A049AD3787C0859F6DCDEB5297FACAFC6BFF96D1FEF19632AF62E637A03E14A1AB1A77286AFAFEF6534ED5BAD28A1DB82531E2040D21B945074B62285D03E65E65FA598599436149CE51E7C8DE50089A7454B2D966404493CC20AFC629FC3859B2ED711C38E608417788E14B5659B19632F7B732E0E638E41C25F1716CC396FDFB483CF1CB2CBB7FC435D31B79417188F6C5E85707737FB34A1B1ED966A240EB526821C81AA01921F6A3DADACF99177EBBC4CD282D9548FE843B459839E1BE5042223CF7157645C06670E835508CD3126EC53715529463E69704AF4DFC255121C4C2293B3936F02F38A3B96962AEFF0F8756F234D1F8527560A7A852CADF4D5470577183A90BF6F04F81B7EEBBF2F5616DB0B316F63DF42D2ECC367574FE9CC28F2F98085BEC1DEA9813C925531CC8118D99FB8BC676C6DD4885E3195687824B61A5217B6AC0CC5D1643E1D6D7EBB3B5A426EB657B539E77D9A6B41DE328BC7871C9DE83D9EA5E9861A9087EA348011C9FE0AF6DB144792F5F2B67949AF7A47260FF3F3331CDDCFB06C0234C343B9BCE4B5036B7F7FE7BDD9891FB9AC164751CD9C202CB5B04A8B15D6AB5A087F421EDDBE75F02D54259A2450C50341F0F9E3DB71B08EF4D1CFC2E17D6A9E58F7C44BC6599C699BA2058D66BC53D94A848C2A15123C78B82F10A2E570E77A51F1A9A205455191CC91DCB3A3E184BA62C9C1C13D2624D4E3875503370EFC60B4D5C99D312CD6ACB7FD925C3FBB48EF5F0A279B66ADB73B5448475F411CD8C44F781DF2491C026A44A078A7AA9E6C51B376F152CAA3156CE6D92D58F043A2EC10992DA3AEA57E88B1FD1B1657987CA05A1B9B0E9D9953B0A8D856FAB10567DF17FA9833700EF8F2C11E7E22611BF77E2D15291FA9EE14B2173A9D3717DF1DCF9E0FDF9E5BDB50E9B7560A9A2D5FE92D3C3894C27590E3AEA61D74207E39310BB944347EE72C3AEC16326B283E6D597A0ADEEFA37F6E7304E8F47CD1AA6CFEDF129B485B8371C6A4C42381
94B29BC5D86E3A0A3DDBF42A6C864732FA533ED2F9146822C1856482A597D8F8852243755E8550DF468E7AD6AE24C139BD63A0E764229719359D7E7961A6385AB7D306237A325640395992D6A3AC6E5677A114BF126EC894A5CB2D34ACA5446C359DD41F8381B67E5FE90C10C4692BD82EE965056BBEBA4713D642F0CB5BCBDCE9C96E002962800E5AC50B9DE39C346419BED7403BFFB2F96018963FAE4E9235195715738AD2B5B425F48B8064149DC6DAEE2962509B2B53E7B7D0A8FBAC41E7B98C8EBFAA3245CE922F5BD0712A15186720604B19ECDE462F22A68BE615FB60F983F31293158F7E635587C04F8DF73C4EDE82253F595DB3CD4043A0353DCF270366594C499081C5A5671EC8AEAB957395A2B313AA27B4D7A4847CE4A0252BB3AC2724429AAEA86FF5DFC3347F5F2DB7AB733966D984CEBA16B2DE0DD427B064C976B5FF34AEE0CA9061F80C616902FE958DFE16D7D89F904497F929C1E15DF637E0C39895F9B0295C15CA743528E5DA7356D382FEAA1006AD4C2A386194BF1CB6441205F44B74CD7A3B9C2B67EE9CC5F782524016687EB6F9F5DD738724DB708D4B9FF392E7F5A0D4DFD46FDF53333B4FA0CE149DFC0A570D712BB252BD3DB30E1EAD2A0E47EC7FFBD9E40218BFE622FF707EDABA5406E7BC780D558EC8E8649E92C7F1743A2AD37135E05BEF77E2113BD033CB4CA14B0A74B2B24E6ABB000886C87A97F4CB5809473386ADC6B0B311BC40D37734DE88DE6A5367BE52F454EF67EDC1034EF4A341372D892279068D87D422282473567176F20B9EC2E6A38AE56EC096C8E7A19B864078342EC754D53613C68D8E131221C73135758ED50D3EDF75475D2EC192BB2A43AB333F201E1B36720CCBD77BB4AB708FB1C152C1D50EE9FBC0942B628A9DC5544C062C6408A5CDD5F08D0311D883450133801C6B7C47D53518597A953C8178F3B9F22FD750FC5B66C607940B3228CD9B77EDC9D25A00A7EC39D1A8B085B15100F4BA83B82C41EBBE19F8D3176883AC27627E38950F754C4EC7789F7CD2B56F366C8F7DFF48C59A718B5D879C20B88A5784319EB00F1C7BE1C3D7FC0B504AF25C96F9E9D46BA67E3FFE6A074EE299611B95B273393A918E44F307EA09757C0167B221CA8F05CEC6F8D42B2B708AAEDBCB758513271051B0522F0918928F354CC8A79E78DCFECB1ED70147C9A3393E813819E52556A8E09A249BF91802B59B4A37930D3F47AE25DCC71BD7B6D892BAB7AE31C798B91D03A5322BED0166744E6DF4145B8B420B13DF14AB08C6506B135E49FA167A303D69DE959CC9F87002924F78B827D32A2E2024BB1744E814BE72DC9D480858204B0FB07196D8139781390C3F2B7F6BFBB84653442848BADEC968BBB8B37B9E8E9D6BB2CFC376442EFEED29DB3D205CF8D758FE1E6E2A2F9072FEADE6911B73DC596C2E
E43987E9FFD3A43F99D016BD70288CCEED69C50B7A13A9D65F566829B7AC5AE4FBEFD4594C6988D3DB4D6309C3D36F990D29491D598E5FC80DC686BE1AB60BBE97168B254A5EAC34682E4BA75E8CD891F01D9FEF0B148F8ECA5D863E1B116F3A06E5B821FCC7ED0035BA3A6A073352AD0335289376129910F05E8028F4F54A0DBCA27A641BE7CDE7C797BF61FEEC4F5B13AD624E96A4556E5FCE3FD942B11514D7E52DFB008227EA311D2ECE75C4FC2E83020623B9BC745639792923D965F319FB755369E7C4DD6E42C747F852F52F69F5CC485FCE132FD54B4C05384DF1CFCE9262217B49FE386618A63C45E4E1D2C09BDA53DDC383ACED111F1146CDE396BCB5A7DAEBF6B52BE07E6EA971C6FE07DA8B771076BCF592FBB3D0BF775823886592A04F789E21C28836978E3258851ABD68425E651B7C85ADFA4820F37C4137FEE6505B170ADEFE5CBC2002CC6760D44B64DE2426AA7A29696BC78DBFE5CF710F4C4640EFD3F07556F5110E2AF381A8CA71DD693AB4629E681A61F0D241942329C94C7FF4CC2FE253FB1882B6C26AD444E3F4B3692374BA56A8A5C938FE5CA351194F1D58FDFADC7483C769149356B9DB2C011667F5CDC8532857D595FCCD32FE6151812AB4A8ED26747410A67BDB7D372C3B746148F0C1D615557D440B5051091BA9FF657F02E407D3C341F67FB9147C134B9D16375A2C269FF001AE044916351FCA58BD8CB9BE5AF05B16FD38B1F180B932EC26A57AEF1EB6912312D0C14A036C22C993CCAC65B83FCDF415CA9EE8386078CBB0A95ECBF7177A403420E390F3642DD140D4896A18574BB00B9ECC7E0ECC01778B031546CBA4EDF505E6FE746785C496D74826C686B0626FE3C7E8DC4D646DCDEC4B83FACC6A931FD46EDECD9BD95749888B7ED7D54DA17F23C49C9BADC2AAB79FD4D00E1CBE5B4318801D5D694ECF9B3DE4DD36C2758EA6B41219532CE649225D0D3F03A579FAD54DE6E4E529C22D1A25DBE0101235C5F9EAB7671B53610F15A973E2B78EA9DBD6B342E60F3FFC4442F6E2EC58F88E0613926D1699233A4AA3A148884FC91888C34E10FC508B160ACF03A260AA40F4258498A31D230EF96D8E92D8733618F059ED4C0F8E7AD470AB407353152A8495F2C13B3318B9EFAE4185B0CA7DBB3EBCF0CE652070F99D0E13503150981185E65570C1FFC23555D8B67B113B9C3FB53DAFC8F18C9E1AE2558982B610F0D69398CE6E3BCE35B3E542EE2CEFD8465F0D21A2B0A7D19A6E9D41CE5E5E43E9B0194DD81801EE082D78BC45678B8582BF12B869A4AC99917EFF60C78D8A8E3DCD17F9BE7740D9CDF58FC51F2CD53A4B65866BC964CEDDA32510A3AB72D825A180EF8F03CC5E3ECEA19F2079F50F3AA3930A12ADAB2188C52D662F25DEA85495ACA032319DBE8D800D605F21EA40F7E3F9C8049A4A0E37794135
A542DE592E170149B1743BAD7E0C2236F8771EC7E4A7E8C18157DC8F93431A4EB255A38EA052389F6CBEE286D44B53C1295DE5E5624157C51B1BA5D1E5B7869FF56706090FBA53FAF38E217B05B3B6B00FD705DECF74BA6C5664474677FDC30DA731B59F8F5C2E1B0D552F43855A4EB08E70E2A0A8103B88FFC54AB35B7AAE4CF45B2D132491144D4CFFE11BF756FEF657FEC0F67A1C20FCDB03BE88B1A8807C4C691FFD661BD78257930864C4BEB811E6C329DE6DAE8B9BB9E2252B4667672B99C3C8F9E02B2620756F45F618B4774DD542FF89406543E09F617F47D35689D45A617C47D839277A0F8D332079D2250884204DE8B2326F48538999A7C9B912376F0725402037175BEC58ED7693C674E72B0DFDD4273724453E96FD982E53C28162B627E181A6562B92BE875176A3410C0C561981998465A9A669116BB169ADC76D12FCDEFB0E7E7D3DD8287CF60C1CA8F9662028FAC9AC50F916C93FA74FB1607421C44C21FB03DBB4850B87D91981162D1392054A067208F1F24C90AB38DEE02EB89A5723D1C0F2BC7A903AB95B40B10B3971A3D4EA7423065869A4535756F31F6D7B3B2C12AC1C6916DC48AAD37DFB1B35CC98B5369B811489E3C051EBA1B149DB402E0CA3F8B6C6A7AA205B1205EB4110CC5619BEF4671A332D8A6B63BCC63FAD23EEA0F55BC4084C0EFED40045DE7C21A993465118254E88A407ECA79C0C9802CB81CE9DFD89CC5F5D8CB5F3AD1F11B142F5FD160E91BEDFC70FC27D5655DE1E2366D934BCAAC85664241CBDC8DDD0A85FFDFA5E7F85FEFEC2BA886335FA15CC237612313D17A0DD8E3628A7E1491A8A11289699914B27DD160BB94C6C4D53A288636E53837BCF4AC86879959276E89BCFD11A796C46D5C1D6ED290D881B1BC6A968FED3F425B6FCD03539B25841DB8B8C7ADB7AF4DAC7745DAA87EFBF24B129984C93956765E933238D0413C6254BA8C1829622FAFF1B59FD993A3CC06627935F087F0A39CC3CD39D28EA8E97949C052C1945E9FE4747AC813ED40EE5ADCF8C508930EFEC0C6CEF1F9DAD8E4A842A2CAA6AED672A1EE62E30DD66B5824847A33EB962EA9A34F30E0B7BB46BBBF3DC605242495FB0CAEB97AE7BE430AB40E8172EA7C4D40DBFE05B5BFB6ADFF35396AD5A3321659B3B29659CB050A99055EEE665DCCBC555F076C72BC399928062E98FC41224D90E3F9983E3ED4400D9A181B51B819DB1ED942B27F84F8115924CF58A404192E13AD8083EF576650E351096F3DD26B2C9C47F7ACC91F428317D218E327D742DA840A4D1F4490AF1B6506ADF1AE0862896EE4072B0DF9324310C0C0C050CE839AD595EB8EBC987D5C218BD62FBC86EFF4365C73693DFF1712180C1F9FF0F1D77799580CB95C4BADBF597C3A6F035E68A549EDB0C93235F3C166E1524510E5356ACD43EFAA2955E3D127CB3
2C9BF621A39FA1F17A719CB1BB16D138D90A2701E6EA961F7CB028D429A41BF913CE9C7624EF599CB9AB62399535CDB834496430E6B874E182E1F24A715F3CCAF3EE8F522CD998EDDDA29BD62C5F5D4909862441C5F5B1C55A7FFF8B9B7DF65ACC47033DAA084FC4D20F361F3C2303B30AE4D86F93A82CB5BA67DA48BBAA16261D212184B10F108127287834BFBC08BCDA4847FF80A7BFA8D9A4CFE61EDFCC4685E51A8AB52C1E8A3DA6EB3DD25B221C07EFEB90A99754DE7025747CE046C9F26287CB2ED9C1C78BE2DA60B4210BA897A9BEDCCF1C0590D33A6F7274BF8DEF730D1FD7391DDA8D4117F242D8E70B0530DB1D6255E0587E22C57F99BEEDB12537BCB84FF7B6E00210F9A7750998476CD8D7ECEE98B12E1BDA826DF0919461EEE476C1EB274E695534968050BAFAC1BEFAACFD4581A7FEC19D02DAABC224E3588AA8EA1A46406D9F0B66E0515207A004BF00D825B18176E4AB9648B35B1075E744FF88761FFCDC5F111C67CFED304C95439937314E106646C963737597AD902F2B6E72C65A2AA62AE0677F976232E3969987A83C2321058BF8BFF0150F7965CABE425DDF6C0B1E72D185BC05B5919EC3CD52516F4981D7903025845A536EDBAE17B16676BE72F8FC15653C294BCA4F627D9901E15E891BA783B48150D4604E5657F8A0B1287885F19B9B99915597BDE1049C24742A5E9CB8FD15A0E9CDE948BD8274304C23A3D03E090890F187B3B9FDC05C66FBB88B99F7F0B83050E6E87F596D10AE52BC5C16F46DCAF6B06954E34FCF8F9CFAF72E1032214A9C9E35648EA448FDE584DF085F211D74C5F627CFF94EC6E0210541013C0C8A1CE118545F4019FD2F906E5569CBE52C6E9FF8322EB46201BC422A7BA7FAAF654D279934969AA0953B76B1182DFE4DBE62950709CCD83F1E04BBA5608A17BDCB256C3ADB777F18507E32D5394816DE89EBCB35A5E73FFA9E5AB601F6526DA372117B2EE94BA06652F4FD7F4F24893D46BA52C330BFA1F8BD8A4801FE1F43AF827F9044823A304642D4E1949AA0BC24EF9502F6C74D9400BFAEC8FA96F0F7ECD407D63A6C59F50FF3424F0DBAA180D83F711EA469DF01BFE396363AB8984D46AC7356381DC7DBA6EA673D36987ED333EFABBA917B020640FD32EC601FEAA9C6882E8C709F1A981908701DCA5061E3D68FD8E2838042448583CA5A38C73FA7DB4E06643479822905E1721E3D11047D7ADE9804AC620616338724B53E9E500762523F422C82C1B61D9B85AA4B0B9F7645D031A15C450CCA58E1C966330A559909D6BB8D3F23C86CEDC2DC1255345341F85DE6A103C84C901ECFEAEFA1255DFB83DB716A3F69A433C4B0CE66A68BBEB7D786C3D20EBA48119B7BC70C5D8BEE964FFF82E3825FAC0D28A06E05DE7B7EF755CD1B5D3BBEF9A8D311E2ABC065DDE1C573DCF74DDA1758A91D
704FA38D7A2A5F6AF93383D674B19C0F99EA3FE8368AB9F2D769B5555BBEFC19731171E6046ED976C7BE685FE920711A897283143088CBF0ED609E37350BE35265271E06AA30040EF3F905C20C5C404D2E863B5C0E6062C3F97B70DD9BDC9A9BD226FF0812FD66C4EFC5DB1A415FA5709ADA569179F5144F74EC832331996987D0B37DBD9B36D4451DFB0E41D962093E1AF19094AAF38AA42A483026FD5531DEC2591F19BC034254B3B176DE76CF2475448C97F6C2B799D4A6BF84C0D3BAFC3ADB5811E7127B2C10F8D4F54A53648C13A4805189498201820C00662342ACB5B9302931F143C2FD30828C9B29E9540FF9E9E1299FE8AB068E738A9B37DEF4F34FBECF9F6C11811CED8646F637F5D4735BF7B7CE616CA843E5F6A7DBFB1AE7499F9026B30FF33F9B36D7B208B553E85EE92CEC9B5C8CDAFA85973E0DD3DBE93264B0A1102FBF674D81445CA7F70CEEBAC665DCEC05294183A57BB3BE119EDD02C7C20FB6FC9BED9171EF608960DD911BAD8775D4CB29E950B432D30B06A39E2362BF4461F810B7DF14C9137A586D5AA31D0681A7622149930730A3F8796E94EE2A3FDB5FC9C62104F20C36BD9BD0A2847A690EAB8F7BA688FBB970BDFC0E5ACF4E10980AD6BF62D61B151B23D55CD528E8C1ADFAF1CF64C99E50887EE85D71C7AEB1C9A3D8606B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Bold cguidfix
/F1.1/HelveticaNeue-Bold renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 1031 594 rc
0 594 m
1031 594 l
1031 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-930 1238 m
1867 1238 l
1867 -746 l
-930 -746 l
h
-930 1238 m
f
0.75 1 1 sc
273.0625 593.25 m
1030.5 593.25 l
1030.5 0.8359375 l
273.0625 0.8359375 l
h
273.0625 593.25 m
f
1 1 0.75 sc
0 593.25 m
262.9375 593.25 l
262.9375 0.8359375 l
0 0.8359375 l
h
0 593.25 m
f
1 1 1 sc
150.5625 438.53745 m
150.5625 447.48944 149.05119 448.59698 138.01157 457.45636 c
137.89494 457.548 l
126.79701 466.5 126.68158 466.5 115.29209 466.5 c
100.12673 466.5 31.5625 466.5 31.5625 466.5 c
31.5625 372 l
150.5625 372 l
150.5625 438.53745 l
h
150.5625 438.53745 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -94 542 cm
244.5625 103.46255 m
244.5625 94.510567 243.05119 93.403023 232.01157 84.543648 c
231.89494 84.451988 l
220.79701 75.5 220.68158 75.5 209.29208 75.5 c
194.12672 75.5 125.5625 75.5 125.5625 75.5 c
125.5625 170 l
244.5625 170 l
244.5625 103.46255 l
h
244.5625 103.00139 m
244.5625 94.510567 244.44588 94.510567 220.68158 94.510567 c
220.68158 94.510567 l
220.68158 75.592613 220.68158 75.5 209.98943 75.5 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 91.0625 419.25 cm
/F1.1[ 16 0 0 -16 0 0]sf
-29.615999 -3.4641113 m
(!"#$%&'\()[ 10.960000 4.128000 9.776000 9.184000 9.776000 6.224000 9.184000 0.000000 ] xS
-48.448002 16 m
(\)&$*$+,',-.+)[ 10.672000 5.936000 9.184000 8.592000 9.184000 9.488000 5.632000 9.184000 5.632000 4.128000 9.776000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
150.5625 243.03745 m
150.5625 251.98944 149.05119 253.09697 138.01157 261.95636 c
137.89494 262.048 l
126.79701 271 126.68158 271 115.29209 271 c
100.12673 271 31.5625 271 31.5625 271 c
31.5625 176.5 l
150.5625 176.5 l
150.5625 243.03745 l
h
150.5625 243.03745 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -94 542 cm
244.5625 298.96255 m
244.5625 290.01056 243.05119 288.90302 232.01157 280.04364 c
231.89494 279.952 l
220.79701 271 220.68158 271 209.29208 271 c
194.12672 271 125.5625 271 125.5625 271 c
125.5625 365.5 l
244.5625 365.5 l
244.5625 298.96255 l
h
244.5625 298.5014 m
244.5625 290.01056 244.44588 290.01056 220.68158 290.01056 c
220.68158 290.01056 l
220.68158 271.09262 220.68158 271 209.98943 271 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 91.0625 223.75 cm
-40.736 -3.4641113 m
(\)&$/-0',$*)[ 10.672000 5.936000 9.184000 9.776000 4.128000 9.184000 9.184000 5.632000 9.184000 0.000000 ] xS
-34.512001 16 m
(1&.2\(34*)[ 5.328000 5.936000 9.776000 14.496000 4.448000 12.448000 8.000000 0.000000 ] xS
0 J
[
4
4
] 0 d
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -94 542 cm
362.87109 -48 m
364.19141 537.91406 l
S
0 0.21569 0.46274999 sc
0 i
1 0 0 -1 131.46875 553.5 cm
/F1.1[ 24 0 0 -24 0 0]sf
-79.764 8.6519165 m
(56$,*\(7./8"$)[ 14.664000 17.784000 13.776000 8.448000 12.888000 6.672000 21.768000 14.664000 14.664000 14.232000 6.192000 0.000000 ] xS
1 0 0 -1 705.5 553.5 cm
-49.787998 8.6519165 m
(9':'\(!\);)[ 13.344000 13.776000 12.480000 13.776000 6.672000 16.440000 16.008000 0.000000 ] xS
1 1 1 sc
CM
577.5 438.53745 m
577.5 447.48944 575.09967 448.59698 557.56616 457.45636 c
557.38092 457.548 l
539.75482 466.5 539.57147 466.5 521.4823 466.5 c
497.39612 466.5 388.5 466.5 388.5 466.5 c
388.5 372 l
577.5 372 l
577.5 438.53745 l
h
577.5 438.53745 m
f
1 J
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -94 542 cm
671.5 103.46255 m
671.5 94.510567 669.09967 93.403023 651.56616 84.543648 c
651.38092 84.451988 l
633.75482 75.5 633.57147 75.5 615.4823 75.5 c
591.39612 75.5 482.5 75.5 482.5 75.5 c
482.5 170 l
671.5 170 l
671.5 103.46255 l
h
671.5 103.00139 m
671.5 94.510567 671.31476 94.510567 633.57147 94.510567 c
633.57147 94.510567 l
633.57147 75.592613 633.57147 75.5 616.58984 75.5 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 483 419.25 cm
/F1.1[ 16 0 0 -16 0 0]sf
-77.928001 -3.4641113 m
(<$0"'&$\(<',',=5$*\(>\()[ 11.856000 9.184000 9.184000 4.128000 9.184000 5.936000 9.184000 4.448000 11.856000 9.184000 5.632000 9.184000 5.632000 8.304000 9.776000 9.184000 8.592000 4.448000 10.960000 0.000000 ] xS
-33.335999 16 m
(?8+0,-.+)[ 9.488000 9.488000 9.488000 9.184000 5.632000 4.128000 9.776000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
577.5 243.03745 m
577.5 251.98944 575.09967 253.09697 557.56616 261.95636 c
557.38092 262.048 l
539.75482 271 539.57147 271 521.4823 271 c
497.39612 271 388.5 271 388.5 271 c
388.5 176.5 l
577.5 176.5 l
577.5 243.03745 l
h
577.5 243.03745 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -94 542 cm
671.5 298.96255 m
671.5 290.01056 669.09967 288.90302 651.56616 280.04364 c
651.38092 279.952 l
633.75482 271 633.57147 271 615.4823 271 c
591.39612 271 482.5 271 482.5 271 c
482.5 365.5 l
671.5 365.5 l
671.5 298.96255 l
h
671.5 298.5014 m
671.5 290.01056 671.31476 290.01056 633.57147 290.01056 c
633.57147 290.01056 l
633.57147 271.09262 633.57147 271 616.58984 271 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 483 223.75 cm
-74.056 -3.4641113 m
(<$0"'&$\(@'&-'%"$*\(>\()[ 11.856000 9.184000 9.184000 4.128000 9.184000 5.936000 9.184000 4.448000 9.200000 9.184000 6.224000 4.128000 9.184000 9.776000 4.128000 9.184000 8.592000 4.448000 10.960000 0.000000 ] xS
-40.584 16 m
(!**$&,-.+*)[ 10.960000 8.592000 8.592000 9.184000 6.224000 5.632000 4.128000 9.776000 9.488000 0.000000 ] xS
0 J
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -94 542 cm
244.5625 122.75 m
473.64999 122.75 l
S
0.5 w
1 1 1 sc
244.5625 122.75 m
473.64999 122.75 l
S
0 i
0 0 0 sc
CM
387.64999 419.25 m
379.64999 422.25 l
379.64999 416.25 l
h
387.64999 419.25 m
f
0.25 w
0 j
1 0 0 -1 -94 542 cm
481.64999 122.75 m
473.64999 119.75 l
473.64999 125.75 l
h
481.64999 122.75 m
S
1 w
1 j
0.60000002 i
244.5625 318.25 m
473.64999 318.25 l
S
0.5 w
1 1 1 sc
244.5625 318.25 m
473.64999 318.25 l
S
0 i
0 0 0 sc
CM
387.64999 223.75 m
379.64999 226.75 l
379.64999 220.75 l
h
387.64999 223.75 m
f
0.25 w
0 j
1 0 0 -1 -94 542 cm
481.64999 318.25 m
473.64999 315.25 l
473.64999 321.25 l
h
481.64999 318.25 m
S
1 1 1 sc
CM
630 365 m
781 365 l
781 291.5 l
630 291.5 l
h
630 365 m
f
1 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -94 542 cm
724 177 m
875 177 l
875 250.5 l
724 250.5 l
h
724 177 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 705.5 328.25 cm
-36.144001 6.2679443 m
(AB$0C-+#)[ 11.856000 9.488000 9.184000 9.184000 9.184000 4.128000 9.488000 0.000000 ] xS
0 J
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -94 542 cm
671.5 161.39944 m
715.80859 179.52116 l
S
0.5 w
1 1 1 sc
671.5 161.39944 m
715.80859 179.52116 l
S
0 i
0 0 0 sc
CM
629.21326 359.45041 m
622.94427 365.25558 l
620.67297 359.70209 l
h
629.21326 359.45041 m
f
0.25 w
0 j
1 0 0 -1 -94 542 cm
723.21326 182.54958 m
716.94427 176.74443 l
714.67297 182.2979 l
h
723.21326 182.54958 m
S
1 w
1 j
0.60000002 i
654.83215 281.69513 m
715.9895 252.97179 l
S
0.5 w
1 1 1 sc
654.83215 281.69513 m
715.9895 252.97179 l
S
0 i
0 0 0 sc
CM
629.23065 292.42911 m
620.71417 291.74365 l
623.26483 286.31281 l
h
629.23065 292.42911 m
f
0.25 w
0 j
1 0 0 -1 -94 542 cm
723.23065 249.57089 m
714.71417 250.25636 l
717.26483 255.68721 l
h
723.23065 249.57089 m
S
1 1 1 sc
CM
989 343.25134 m
989 350.21402 987.08228 351.07544 973.07404 357.96606 c
972.92603 358.03735 l
958.84381 365 958.69733 365 944.24512 365 c
925.00165 365 838 365 838 365 c
838 291.5 l
989 291.5 l
989 343.25134 l
h
989 343.25134 m
f
1 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -94 542 cm
1083 198.74866 m
1083 191.786 1081.0823 190.92458 1067.074 184.03395 c
1066.926 183.96266 l
1052.8438 177 1052.6973 177 1038.2451 177 c
1019.0016 177 932 177 932 177 c
932 250.5 l
1083 250.5 l
1083 198.74866 l
h
1083 198.38997 m
1083 191.786 1082.8521 191.786 1052.6973 191.786 c
1052.6973 191.786 l
1052.6973 177.07204 1052.6973 177 1039.13 177 c
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 913.5 328.25 cm
-24.288 6.2679443 m
(D$*8",)[ 11.552000 9.184000 8.592000 9.488000 4.128000 0.000000 ] xS
0 J
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -94 542 cm
875 213.75 m
923.15002 213.75 l
S
0.5 w
1 1 1 sc
875 213.75 m
923.15002 213.75 l
S
0 i
0 0 0 sc
CM
837.15002 328.25 m
829.15002 331.25 l
829.15002 325.25 l
h
837.15002 328.25 m
f
0.25 w
0 j
1 0 0 -1 -94 542 cm
931.15002 213.75 m
923.15002 210.75 l
923.15002 216.75 l
h
931.15002 213.75 m
S
/Cs1 SC
0 sc
1 0 0 -1 913.5 223.75 cm
-111.12 6.2679443 m
(D$,8&+\(,B$\(&$*8",\('+/\(/$0./$)[ 11.552000 9.184000 5.632000 9.488000 6.512000 9.488000 4.448000 5.632000 9.488000 9.184000 4.448000 5.936000 9.184000 8.592000 9.488000 4.128000 5.632000 4.448000 9.184000 9.488000 9.776000 4.448000 9.776000 9.184000 9.184000 9.776000 9.776000 0.000000 ] xS
1 w
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -94 542 cm
1007.5 250.5 m
1007.5 294.39999 l
S
0.5 w
1 1 1 sc
1007.5 250.5 m
1007.5 294.39999 l
S
0 i
0 0 0 sc
CM
913.5 239.60001 m
916.5 247.60001 l
910.5 247.60001 l
h
913.5 239.60001 m
f
0.25 w
0 j
1 0 0 -1 -94 542 cm
1007.5 302.39999 m
1010.5 294.39999 l
1004.5 294.39999 l
h
1007.5 302.39999 m
S
ep
end
%%Trailer
%%EOF
